//jshint esversion: 6, -W083

// npm modules
const shoe = require('shoe-bin');
const multiplex = require('multiplex');
const hterm = require('hterm-umdjs').hterm;
const lib = require('hterm-umdjs').lib; 
const through = require('through');
const throughout = require('throughout');
const dnode = require('dnode');
const chalk = require('chalk');
let chalkCtx = new chalk.constructor({enabled: true});

// local modules
const setPreferences = require('./preferences');
const solarized = require('./solarized');
const apc = require('./apc');
const apcHandlers = require('./apc-handlers');

// TODO: Either set to a non-persistent storage or expose
// via localstoragefs (to be created) and do not set prefs in code.
// We can than mount localstorage to ~/.config/htmshell and set prefs
// in a json file.
hterm.defaultStorage = new lib.Storage.Local();

// connect to websocket on the server
let t = new hterm.Terminal();

t.onTerminalReady = function() {
    let sockStream = shoe('/pty');
    let plex = multiplex();
    sockStream.pipe(plex).pipe(sockStream);
    console.log('terminal ready');

    let ptyStream = plex.createSharedStream('pty');
    let io = t.io.push();

    let rpc = dnode();
    let ctlStream = plex.createSharedStream('ctl');
    ctlStream.pipe(rpc).pipe(ctlStream);
    rpc.on('remote', function (dnodeRemote) {
        // TODO: send initial size
        io.onTerminalResize = function(columns, rows) {
            console.log('resize', columns, rows);
            dnodeRemote.resizePTY(columns, rows);
        };
    });

    io.onVTKeystroke = function(str) {
        ptyStream.write(str);
    };

    io.sendString = function(str) {
        //console.log(str);
        // Just like a keystroke, except str was generated by the
        // terminal itself.
        // Most likely you'll do the same this as onVTKeystroke.
    };
    t.io.println(chalkCtx.red('*** 65535 BASIC BYTES FREE ***'));

    window.terminal = (function() {
        function toString(args) {
            return [].slice.call(args).map( String ).join(' ');
        }
        function log() {
            t.io.println(toString(arguments));
        }
        function warn() {
            t.io.println(chalkCtx.yellow(toString(arguments)));
        }
        function error() {
            t.io.println(chalkCtx.red(toString(arguments)));
        }
        return {log, warn, error};
    })();

    console.log(chalkCtx.red('*** 65535 BASIC BYTES FREE ***'));

    ptyStream.pipe(
        apc(apcHandlers)
    ).on('data', function (data) {
        t.io.print(data.toString());
    });

    setPreferences(t.prefs_);
    solarized.dark(t);
};
t.decorate(document.querySelector('#terminal'));
t.installKeyboard();

// TODO: optionally initialize domfs 
//const domfs = require('domfs/lib/client');
//domfs.run();
