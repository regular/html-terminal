//jshint esversion: 6, -W083
var shoe = require('shoe');
var hterm = require('hterm-umdjs').hterm; 
var lib = require('hterm-umdjs').lib; 
var solarized = require('./solarized');

hterm.defaultStorage = new lib.Storage.Local();
var t = new hterm.Terminal();

t.onTerminalReady = function() {
    console.log('READY');

    // connect to websocket on the server
    var stream = shoe('/pty');
    var io = t.io.push();

    io.onVTKeystroke = function(str) {
        console.log("waa");
        console.log(str);
        stream.write(str);
    };
    console.log("io",io);
    console.log("term",t);

    io.sendString = function(str) {
        console.log(str);
        // Just like a keystroke, except str was generated by the
        // terminal itself.
        // Most likely you'll do the same this as onVTKeystroke.
    };
    //t.io.print('Print a string without a newline');
    t.io.println('*** 65535 BASIC BYTES FREE ***');

    stream.on('data', function (msg) {
        t.io.print(msg);
    });

    // See https://chromium.googlesource.com/chromiumos/platform/assets/+/95f6a2c7a984b1c09b7d66c24794ce2057144e86/chromeapps/hterm/doc/faq.txt
    t.prefs_.set('cursor-color', 'rgba(155, 255, 155, 0.5)');
    t.prefs_.set('font-size', 35);
    //t.prefs_.set('font-family', 'Monaco for Powerline');
    t.prefs_.set('font-family', 'Inconsolata');
    t.prefs_.set('cursor-blink', true);

    t.prefs_.set('enable-bold', true);
    t.prefs_.set('enable-bold-as-bright', false);

    t.prefs_.set('environment', {
      "TERM": "xterm-256color"
    });
    solarized.dark(t);

    // mpc test
    var split = require('split');
    let mpc = shoe('/mpc');
    setInterval( ()=> {
        mpc.write('status\n');
        return true;
    }, 5000);
    for(let btn of 'prev play pause next'.split(' ')) {
        document.querySelector(`#mpc .${btn}`).addEventListener('click', ()=>{
            //t.io.println(`${btn}!`);
            mpc.write(`${btn}\nstatus\n`);
        });
    }
    mpc.pipe(split()).on('data', function (msg) {
        let meta = msg.match(/artist=([^\t]*)\ttitle=([^\t]*)\tduration=(\d*)\s*/);
        let progress = msg.match(/\[(\w+)\]\s+\#(\d+)\/(\d+)\s+(\d+)\:(\d+)\/(\d+)\:(\d+)\s*.*/);
        let status = msg.match(/volume: (\d+)%\s+repeat: (on|off)\s+random: (on|off)\s+single: (on|off)\s+consume: (on|off)/);
        if (meta) {
            let [_,artist,title,duration] = meta;
            //t.io.println(`title: ${title}`);
            let el = document.querySelector('#mpc .title');
            el.innerHTML = title;
        } else if (progress) {
            let [_, transport, listPos, listLen, curMin, curSec, durMin, durSec] = progress;
            if (transport === 'playing') {
                document.querySelector('#mpc .play').style.display = 'none';
                document.querySelector('#mpc .pause').style.display = 'initial';
            } if (transport === 'paused') {
                document.querySelector('#mpc .play').style.display = 'initial';
                document.querySelector('#mpc .pause').style.display = 'none';
            }
            //t.io.println(`transport: ${transport} pos: ${curMin}:${curSec}`);
        } else if (status) {
            let [_, volume, repeat, random, single, consume] = status;
            //t.io.println(`volume: ${volume}`);
        } else {
            //t.io.println(msg);
        }
    });
    // --
};
t.decorate(document.querySelector('#terminal'));
t.installKeyboard();

