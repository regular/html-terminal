//jshint esversion: 6, -W083

// npm modules
const shoe = require('shoe');
const hterm = require('hterm-umdjs').hterm; 
const lib = require('hterm-umdjs').lib; 
const through = require('through');
const throughout = require('throughout');

// htmshell modules (npm link'ed at dev time)
const domfs = require('domfs/lib/client');

// local modules
const setPreferences = require('./preferences');
const solarized = require('./solarized');
const filterAndProcessAPC = require('./apc');
const apc = require('./apc');
const apcHandlers = require('./apc-handlers');

// TODO: Either set to a non-persistent storage or expose
// via localstoragefs (to be created) and do not set prefs in code.
// We can than mount localstorage to ~/.config/htmshell and set prefs
// in a json file.
hterm.defaultStorage = new lib.Storage.Local();
let t = new hterm.Terminal();

t.onTerminalReady = function() {
    console.log('terminal ready');

    // connect to websocket on the server
    let stream = shoe('/pty');
    let io = t.io.push();

    io.onVTKeystroke = function(str) {
        stream.write(str);
    };

    io.sendString = function(str) {
        //console.log(str);
        // Just like a keystroke, except str was generated by the
        // terminal itself.
        // Most likely you'll do the same this as onVTKeystroke.
    };
    t.io.println('*** 65535 BASIC BYTES FREE ***');

    stream.pipe(
        throughout(
            through( function(data) { this.queue(Buffer.from(data));} ),
            apc(apcHandlers)
        )
    ).on('data', function (data) {
        t.io.print(data.toString());
    });

    setPreferences(t.prefs_);
    solarized.dark(t);
};

t.decorate(document.querySelector('#terminal'));
t.installKeyboard();
domfs.run();
